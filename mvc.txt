MVC, You're doing it wrong.
===========================

A rather common and hyped pattern used by web frameworks is Model-View-Controller(MVC).
The wikipedia pages gives a good description of the pattern and how various frameworks that claim to use it implement it.


The is a perfect example of cargo cult development, nobody really thought about it

The main intention of MVC is a seperation of concerns in your program. Avoiding mixing unrelated logic means that you can avoid unnescessarily changing things when
unrelated things require changes.
The most obvious example is that you don't want to have to change(or accidentally break) your business logic when you're making modifications to the user interface.

This is a really good idea and anyone coming from the early web apps in PHP that mixed php logic and html in a tangled mess would have jumped at the change of
avoiding that mess.

But MVC was originally invisioned as a pattern for a desktop app and web developers coming from desktop apps with little experience with network programming had
trouble adapting it to their needs.
Developers coming to networked applications for the first time usually attempt to avoid the network part of it. Sockets are hard, latency and the failure 
conditions are complicated. Throw in the fact that on the web the client is running code the server just sent it, and you can see how they got confused.

The model-view-controller pattern is commonly implemented in web frameworks as:
Model, data structures and some kind of ORM
View, html templates that is pushed data from the controller, or that pulls data from the model from references given to it by the controller.
Controller, handles the http side of things, user authentication, fetching data from the model and pushing it to the view.

[Diagram]

In this implementation,
The controller depends on the view since it needs to know what data the view needs pushed to it.
The controller depends on the model because it needs to know what data there is to be fetched
The view depends on the controller for access to the model.

This means that if you change the model, and want to display that change in the user interface(which is fairly common) you also have to change the controller.
and if you suddenly decide that you need a jabber interface to your code you're kind of screwed.

This problem comes because a lot of web developers don't really understand networking.
Symptons of this are fairly common:
- just using client side validation
- cookies that contain user role creditials(isadmin=1 etc.)
- javascript authentication or data protection.


Your templates are not the view of the server-side of a web app. They are in fact a compiler for building a client program  for your server-side app.

A much better MVC:

Server-side
---------------

Model, data structures, serialisation/deserialisation
View, everything http, cookies, urls, REST, templates, any requirements that are externally impossed on your app.
Controller, Your business logic.

Client-side(generated by the server-side app and sent to the user)*
----------------
Model, data structures
View, html, css, dhtml(view related javascript) etc.
Controller, calls back to the server, client side business logic.

Why should you care?
--------------------
The main idea of MVC is seperation of concerns, but the implementations of it for web apps don't really do this.
The Controller is the heart of your application, it's your logic. You can borrow someone else's model and slap on a generic view. But your controller is what 
makes your application unique. Nobody can write your controller logic for you.

Seperating your business logic from http means that can more easily deal with changes on the client end of the connection.
Need an API for your app, just stick a JSON REST view on the front of it. Need to interact with iphone users, android users, email users, irc users, jabber users, 
ajax users  etc. just create or steal the appropriate view and do the small changes to adapt it to your controller. 

You shouldn't have to change your controller when you change web frameworks. If your web framework requires you to rewrite any of your business logic
when you upgrade then your framework developers have forgotten that the web is just one way to view your app.





 
