The problem with Exceptions:

Exceptions are supposed to make handling errors simpler. The main selling point is that they allow you to seperate error handling from the usual flow of code.  But in doing this they 
Most languages signal errors in one of three ways, the Java way,the python way or the C way.

* The python way involves exceptions. Functions don't declare that they will throw exceptions so you rely on documention to know what exceptions to expect.
The python way is worrying, how can you handle errors if you don't know what they are or where they will come from? But this lack of safety is expected in dynamic languages and is usually handled at testing time.

*The C way involves returning a value that indicates that an error has occurred, i.e. a null or a zero, often it also involves a global variable(errno) being set to provide information about the error.



* The Java way also involves exceptions, but requires the declaration of exceptions that a function can throw and requires that if not handled then they have to be declared all the way up the call stack until they are.


The Java way is pretty much the same as returning errors except that it makes working out where the exception has come from much harder. Did this exception come from the function I just called or is it an exception of the same type that has come from further down the call stack?
eg.

try {
	someFunctionThatThrowsIOException()
	someOtherFunctionThatThrowsIOException()
} catch(IOException e){
	//do something
	//which function threw the exception?
}

This becomes more of a worry when a function changes what exceptions it throws. Suddenly the assumptions you previously made about the flow of control in your error handling is broken and the compiler won't even alert you to the change.

The C way is problematic because often an error value can actually be a valid value and you can't know if a function will actually set errno or not and setting errno tends to hide other errors.
The main advantage of the C way of signaling error is that you know where the error came from. A certain function returned an error, so you know the error came from that call stack, you also know that

The Go way is actually very nice


